// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Set this to your MongoDB connection string in the .env file
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String    @unique
  password   String
  name       String
  // cart       Cart?     @relation(fields: [cartId], references: [id])
  cartId     String?   @db.ObjectId
  orders     Order[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  category    String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  // user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  items       CartItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CartItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  // product     Product  @relation(fields: [productId], references: [id])
  productId   String   @db.ObjectId
  quantity    Int
  cart        Cart     @relation(fields: [cartId], references: [id])
  cartId      String   @db.ObjectId
}

model Order {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  items       OrderItem[]
  total       Float
  createdAt   DateTime   @default(now())
}

model OrderItem {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  // product     Product    @relation(fields: [productId], references: [id])
  productId   String     @db.ObjectId
  quantity    Int
  order       Order      @relation(fields: [orderId], references: [id])
  orderId     String     @db.ObjectId
}
